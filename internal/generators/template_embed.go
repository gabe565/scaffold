//go:build ignore

package main

import (
	"flag"
	"fmt"
	"io/fs"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

type GeneratorConfig struct {
	Package      string
	TemplatesDir string
	TemplatesVar string
	OutputFile   string
}

func (config GeneratorConfig) Embeds() []string {
	paths := []string{config.TemplatesDir}
	err := filepath.WalkDir(config.TemplatesDir, func(path string, d fs.DirEntry, err error) error {
		basename := filepath.Base(path)
		if strings.HasPrefix(basename, ".") || strings.HasPrefix(basename, "_") {
			paths = append(paths, path)
		}
		return nil
	})
	if err != nil {
		panic(err)
	}
	return paths
}

func (config GeneratorConfig) Perms() map[string]string {
	paths := map[string]string{}
	err := filepath.Walk(config.TemplatesDir, func(path string, info fs.FileInfo, err error) error {
		if !info.IsDir() && info.Mode() != 0644 {
			paths[path] = fmt.Sprintf("%#o", info.Mode().Perm())
		}
		return nil
	})
	if err != nil {
		panic(err)
	}
	return paths
}

const OutputTemplate = `// Code generated by gen_template_embed.go; DO NOT EDIT.

package {{ .Package }}

import "embed"

{{ range .Embeds -}}
//go:embed "{{ . }}"
{{ end -}}
var {{ .TemplatesVar }} embed.FS

var {{ .TemplatesVar }}Modes = map[string]int32{
{{- range $path, $perm := .Perms }}
  "{{ $path }}": {{ $perm }},
{{- end }}
}
`

func main() {
	var config GeneratorConfig
	flag.StringVar(&config.Package, "package", "main", "Package name of output template")
	flag.StringVar(&config.TemplatesDir, "templates", "templates", "Templates directory")
	flag.StringVar(&config.TemplatesVar, "var", "templates", "Generated embed variable name")
	flag.StringVar(&config.OutputFile, "output", "template_embed.go", "Output Go file path")
	flag.Parse()

	out, err := os.OpenFile(config.OutputFile, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		panic(err)
	}
	defer out.Close()

	tpl, err := template.New("output").Parse(OutputTemplate)
	if err != nil {
		panic(err)
	}

	err = tpl.Execute(out, config)
	if err != nil {
		panic(err)
	}

	err = out.Close()
	if err != nil {
		panic(err)
	}
}
